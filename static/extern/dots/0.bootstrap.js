(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/dots.js":
/*!**********************!*\
  !*** ../pkg/dots.js ***!
  \**********************/
/*! exports provided: __wbg_random_d23d8e4fe3debfa8, __wbg_now_d53d81f7191768d9, GameConfig, GameInstance, Game, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_random_d23d8e4fe3debfa8\", function() { return __wbg_random_d23d8e4fe3debfa8; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_now_d53d81f7191768d9\", function() { return __wbg_now_d53d81f7191768d9; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameConfig\", function() { return GameConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameInstance\", function() { return GameInstance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Game\", function() { return Game; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _dots_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dots_bg */ \"../pkg/dots_bg.wasm\");\n/* tslint:disable */\n\n\nconst __wbg_random_d23d8e4fe3debfa8_target = Math.random;\n\nfunction __wbg_random_d23d8e4fe3debfa8() {\n    return __wbg_random_d23d8e4fe3debfa8_target();\n}\n\nconst __wbg_now_d53d81f7191768d9_target = Date.now;\n\nfunction __wbg_now_d53d81f7191768d9() {\n    return __wbg_now_d53d81f7191768d9_target();\n}\n\nfunction freeGameConfig(ptr) {\n    \n    _dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_gameconfig_free\"](ptr);\n}\n/**\n*/\nclass GameConfig {\n    \n    static __construct(ptr) {\n        return new GameConfig(ptr);\n    }\n    \n    constructor(ptr) {\n        this.ptr = ptr;\n        \n    }\n    \n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeGameConfig(ptr);\n    }\n}\n\nfunction freeGameInstance(ptr) {\n    \n    _dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_gameinstance_free\"](ptr);\n}\n/**\n*/\nclass GameInstance {\n    \n    static __construct(ptr) {\n        return new GameInstance(ptr);\n    }\n    \n    constructor(ptr) {\n        this.ptr = ptr;\n        \n    }\n    \n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeGameInstance(ptr);\n    }\n}\n\nclass ConstructorToken {\n    constructor(ptr) {\n        this.ptr = ptr;\n    }\n}\n\nfunction freeGame(ptr) {\n    \n    _dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_game_free\"](ptr);\n}\n/**\n*/\nclass Game {\n    \n    static __construct(ptr) {\n        return new Game(new ConstructorToken(ptr));\n    }\n    \n    constructor(...args) {\n        if (args.length === 1 && args[0] instanceof ConstructorToken) {\n            this.ptr = args[0].ptr;\n            return;\n        }\n        \n        // This invocation of new will call this constructor with a ConstructorToken\n        let instance = Game.new(...args);\n        this.ptr = instance.ptr;\n        \n    }\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeGame(ptr);\n    }\n    /**\n    * @returns {Game}\n    */\n    static new() {\n        return Game.__construct(_dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"game_new\"]());\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return _dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"game_height\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return _dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"game_width\"](this.ptr);\n    }\n    /**\n    * @returns {void}\n    */\n    tick() {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return _dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"game_tick\"](this.ptr);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    handle_click(arg0, arg1) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return _dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"game_handle_click\"](this.ptr, arg0, arg1);\n    }\n    /**\n    * @returns {number}\n    */\n    pack() {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return _dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"game_pack\"](this.ptr);\n    }\n}\n\nlet cachedDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_dots_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n\n\n//# sourceURL=webpack:///../pkg/dots.js?");

/***/ }),

/***/ "../pkg/dots_bg.wasm":
/*!***************************!*\
  !*** ../pkg/dots_bg.wasm ***!
  \***************************/
/*! exports provided: memory, __indirect_function_table, __heap_base, __data_end, __wbg_gameconfig_free, __wbg_gameinstance_free, __wbg_game_free, game_new, game_height, game_width, game_tick, game_handle_click, game_pack */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./dots */ \"../pkg/dots.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/dots_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var dots__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dots */ \"../pkg/dots.js\");\n/* harmony import */ var dots_dots_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dots/dots_bg */ \"../pkg/dots_bg.wasm\");\n\n\n\n// capping the tick to 60 times a second\nconst updatesPerSecond = 60\nconst millisPerUpdate = 1 / updatesPerSecond * 1000\n\nvar game = new dots__WEBPACK_IMPORTED_MODULE_0__[\"Game\"]()\n\n// set up the render context\nconst canvas = document.getElementById('dots-canvas')\nconst height = game.height()\nconst width = game.width()\ncanvas.height = height\ncanvas.width = width\nconst ctx = canvas.getContext('2d')\nctx.globalAlpha = 0.8 // everything's a little transparent\n\n// Canvas click handler\ncanvas.addEventListener('click', event => {\n  // translate from page coords to canvas coords\n  // shamelessly lifted from the RustWasm book\n  // https://rustwasm.github.io/book/game-of-life/interactivity.html\n  const boundingRect = canvas.getBoundingClientRect()\n\n  const scaleX = canvas.width / boundingRect.width\n  const scaleY = canvas.height / boundingRect.height\n\n  const canvasX = (event.clientX - boundingRect.left) * scaleX\n  const canvasY = (event.clientY - boundingRect.top) * scaleY\n\n  game.handle_click(canvasX, canvasY)\n})\n\n// define the main loop, updated 60 times per second\nconst renderLoop = () => {\n  // Start with a blank slate\n  ctx.clearRect(0, 0, width, height)\n\n  // tick us forward and grab the packed version\n  game.tick()\n  const levelPtr = game.pack()\n\n  // read header\n  // level_number | level_state | total_dots | win_threshold | captured_dots | last_update\n  const levelData = new Float32Array(dots_dots_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, levelPtr, 6)\n  const level = levelData[0]\n  const levelState = levelData[1]\n  const totalDots = levelData[2]\n  const winThreshold = levelData[3]\n  const capturedDots = levelData[4]\n  const lastUpdate = levelData[5]\n\n  // LevelState:\n  // Begin = 0,\n  // Waiting = 1,\n  // Clicked = 2,\n  // Won = 3,\n  // Lost = 4\n\n  switch (levelState) {\n    case 0: {\n      drawBeginLevel(level, winThreshold, totalDots)\n      window.requestAnimationFrame(renderLoop)\n      break\n    }\n    case 1:\n    case 2: {\n      // get dots\n      const dataLength = totalDots * 7 + 6\n      const dots = new Float32Array(dots_dots_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, levelPtr, dataLength).slice(6)\n\n      if (Date.now() - lastUpdate >= millisPerUpdate) {\n        drawGame(dots, level, totalDots, winThreshold, capturedDots, levelState)\n        window.requestAnimationFrame(renderLoop)\n      }\n      break\n    }\n    case 3: {\n      drawNextLevel(level)\n      window.requestAnimationFrame(renderLoop)\n      break\n    }\n    case 4: {\n      drawRestartLevel(level)\n      window.requestAnimationFrame(renderLoop)\n      break\n    }\n    default: { }\n  }\n}\n\n// DRAW FNS\n\nconst drawLevelButton = (text, colorStr) => {\n  ctx.beginPath()\n  ctx.rect(325, 275, 150, 50)\n  ctx.stroke()\n  ctx.font = '18px serif'\n  ctx.fillStyle = colorStr\n  ctx.fillText(text, 330, 305)\n}\n\nconst drawBeginLevel = (level, winThreshold) => {\n  drawLevelButton('Level ' + level + ' - capture ' + winThreshold, 'purple')\n}\n\nconst drawRestartLevel = (level) => {\n  drawLevelButton('Too bad! Retry ' + level, 'red')\n}\n\nconst drawNextLevel = (level) => {\n  drawLevelButton('Nice job! Level ' + (level + 1), 'green')\n}\n\n// Define how to draw a single frame\nconst drawGame = (dots, level, totalDots, winThreshold, capturedDots, levelState) => {\n  drawProgressCounter(capturedDots, totalDots, winThreshold, levelState)\n  drawLevelNumber(level)\n\n  let dotsLength = dots.length\n  for (let idx = 0; idx < dotsLength; idx += 7) {\n    drawDot(dots.slice(idx, idx + 7))\n  }\n}\n\nconst drawProgressCounter = (capturedDots, totalDots, winThreshold, levelState) => {\n  const won = capturedDots >= winThreshold\n  const levelDots = (levelState == 1) ? totalDots : totalDots - 1\n  ctx.font = '22px serif'\n  ctx.fillStyle = won ? 'green' : 'red'\n  ctx.fillText(capturedDots + '/' + levelDots + ' - goal: ' + winThreshold, 10, 42) // this will be wrong until I implement appstate - its including the player dot\n}\n\nconst drawLevelNumber = level => {\n  ctx.font = '20px serif'\n  ctx.fillStyle = 'blue'\n  ctx.fillText('level ' + level, 10, 70)\n}\n\nconst drawDot = packedDot => {\n  // x | y | radius | DotState | r | g | b\n  if (packedDot[3] !== 5.0) {\n    const posX = packedDot[0]\n    const posY = packedDot[1]\n    const radius = packedDot[2]\n    const color = colorString(packedDot[4], packedDot[5], packedDot[6])\n\n    ctx.beginPath()\n    // use an arc from 0 to 2pi to draw a full circle\n    ctx.arc(posX, posY, radius, 0, 2 * Math.PI, false)\n    ctx.fillStyle = color\n    ctx.fill()\n    ctx.stroke()\n  }\n}\n\nconst colorString = (r, g, b) => '#' + Math.floor(r).toString(16) + Math.floor(g).toString(16) + Math.floor(b).toString(16)\n\n// INIT\n\nwindow.requestAnimationFrame(renderLoop)\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);